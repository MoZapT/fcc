@model PersonDocumentsViewModel
@{ 
    List<PersonDocument> files = new List<PersonDocument>();
    foreach (var userFiles in Model.Documents.Values)
    {
        files = userFiles;
        break;
    }
}

<div class="card">
    <div class="card-header">
        <h2>
            <i class="fas fa-file-alt"></i>
            @Resource.Documents
        </h2>
    </div>
    <div class="card-body">
        <div class="card-deck">
            @foreach (var file in files)
            {
                <div class="card">
                    <div class="card-header">
                        <a href="#" id="DeleteDocument" fileid="@file.Id"><i class="text-danger fas fa-trash-alt"></i></a>
                    </div>
                    <div class="card-body">
                        @if (ContentTypeHelper.IsDocument(file.FileType))
                        {
                            <img class="thumbnail" src="~/Content/file-image.png" alt="" />
                        }
                        else if (ContentTypeHelper.IsVideo(file.FileType))
                        {
                            <img class="thumbnail" src="~/Content/file-image.png" alt="" />
                        }
                        else if (ContentTypeHelper.IsSound(file.FileType))
                        {
                            <img class="thumbnail" src="~/Content/sound-image.png" alt="" />
                        }
                        else if (ContentTypeHelper.IsImage(file.FileType))
                        {
                            string img64 = Convert.ToBase64String(file.BinaryContent);
                            string img64Url = string.Format("data:image/" + file.FileType + ";base64,{0}", img64);
                            <img class="thumbnail" src="@img64Url" alt="" />
                        }
                        <label>@file.Name</label>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="card-footer clearfix">
        <div class="col-md-12">
            <span id="ErrorDocumentCategory" class="text-danger hide">
                @Resource.ErrorDocumentCategoryEmpty
            </span>
        </div>
        <div class="col-md-12">
            <div class="input-group">
                <span class="input-group-addon">@Resource.Category</span>
                @Html.Hidden("DocumentCategory")
                @Html.TextBox("DocumentCategoryTa", "", new { @class = "form-control typeahead", placeholder = "", taname = "DocumentCategoryTa", taurl = "document/categories/" })
                <label for="UploadFile" class="btn btn-primary btn-edges input-group-addon">
                    <i class="fas fa-file-upload"></i>
                    <span class="toggle-text">@Resource.BtnUploadFile</span>
                </label>
                <input id="UploadFile" class="hide" type="file" name="files[]" data-multiple-caption="{count} notimplted" multiple="" aria-invalid="false">
            </div>
        </div>
    </div>
</div>