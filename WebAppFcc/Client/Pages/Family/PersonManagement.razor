@page "/person"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using WebAppFcc.Shared.Enums
@using WebAppFcc.Shared.Models
@using WebAppFcc.Client.Shared.Family
@attribute [Authorize(Roles = "User")]
@implements IDisposable
@inject HttpClient Http
@inject IPersonDataService PersonDataService

@if (ViewState == VmState.List)
{
    <ul class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">
                <span class="fas fa-angle-double-left"></span>
                @Resources.Resource.GoToHome
            </a>
        </li>
    </ul>
    <PersonList />
    <ul class="breadcrumb justify-content-end">
        <li class="breadcrumb-item">
            <a href="/">
                <span class="fas fa-angle-double-left"></span>
                @Resources.Resource.GoToHome
            </a>
        </li>
    </ul>
}
else
{
    <ul class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">
                <span class="fas fa-angle-double-left"></span>
                @Resources.Resource.GoToHome
            </a>
        </li>
        <li class="breadcrumb-item">
            <a href="#" @onclick="@(() => PersonDataService.LoadPersonList())">
                <span class="fas fa-angle-double-left"></span>
                @Resources.Resource.Back
            </a>
        </li>
    </ul>
    
    <ul class="nav nav-tabs nav-justified">
        <li class="nav-item">
            <a class="nav-link active" modified="false" href="#passport" id="passport-tab" data-toggle="tab" role="tab" aria-controls="passport" aria-selected="true" aria-expanded="true">
                @Resources.Resource.PassportView
            </a>
        </li>
        @if (Person?.IsNewOrEmpty == true)
        {
            <li class="nav-item">
                <a class="nav-link" modified="false" href="#relations" id="relations-tab" data-toggle="tab" role="tab" aria-controls="relations" aria-selected="true">
                    @Resources.Resource.PersonRelations
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" modified="false" href="#names" id="names-tab" data-toggle="tab" role="tab" aria-controls="names" aria-selected="true">
                    @Resources.Resource.PreviousNames
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" modified="false" href="#biography" id="biography-tab" data-toggle="tab" role="tab" aria-controls="biography" aria-selected="true">
                    @Resources.Resource.Biography
                </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" modified="false" href="#documents" id="documents-tab" data-toggle="tab" role="tab" aria-controls="documents" aria-selected="true">
                    @Resources.Resource.Documents
                </a>
            </li>
        }
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="passport" role="tabpanel" aria-labelledby="passport-tab">
            <PersonDetail />
        </div>
        <div class="tab-pane" id="relations" role="tabpanel" aria-labelledby="relations-tab">
        </div>
        <div class="tab-pane" id="names" role="tabpanel" aria-labelledby="names-tab">
        </div>
        <div class="tab-pane" id="biography" role="tabpanel" aria-labelledby="biography-tab">
        </div>
        <div class="tab-pane" id="documents" role="tabpanel" aria-labelledby="documents-tab">
        </div>
    </div>

    <ul class="breadcrumb justify-content-end">
        <li class="breadcrumb-item">
            <a href="#" @onclick="@(() => PersonDataService.LoadPersonList())">
                <span class="fas fa-angle-double-left"></span>
                @Resources.Resource.Back
            </a>
        </li>
    </ul>
}

@code { 
    public VmState ViewState { get { return PersonDataService.ViewState; } }
    public int Skip { get { return PersonDataService.Skip; } }
    public int Take { get { return PersonDataService.Take; } }

    public Person Person { get { return PersonDataService.Person; } }
    public IEnumerable<Person> Persons { get { return PersonDataService.Persons ?? new List<Person>(); } }

    protected override async Task OnInitializedAsync()
    {
        PersonDataService.Skip = 0;
        PersonDataService.Take = 10;
        PersonDataService.Person = null;
        await PersonDataService.LoadPersonList();

        PersonDataService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        PersonDataService.OnChange -= StateHasChanged;
    }
}
