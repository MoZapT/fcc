@namespace WebAppFcc.Client.Shared.Family
@inject IPersonDataService PersonDataService

@if (CanBeShown)
{
    <ul class="pagination">
        @if (CurrentPage > 1)
        {
            <li class="previous page-item">
                <a class="page-link" @onclick="() => PageSelected(CurrentPage-1)">
                    <em class="fas fa-angle-double-left"></em>
                    @Resources.Resource.Previous
                </a>
            </li>
        }

        @for (int i = BeginPage; i <= Pages; i++)
        {
            if (i == CurrentPage)
            {
                int pageNr = i;
                <li class="active page-item">
                    <a class="page-link" @onclick="() => PageSelected(pageNr)">@i</a>
                </li>
            }
            else
            {
                int pageNr = i;
                <li class="page-item">
                    <a class="page-link" @onclick="() => PageSelected(pageNr)">@i</a>
                </li>
            }

            if (i > MaximumPageBtns)
            {
                break;
            }
        }

        @if (Pages > MaximumPageBtns)
        {
            <li class="next page-item">
                <a class="page-link" @onclick="() => PageSelected(Pages)">@Resources.Resource.Last</a>
            </li>
        }

        @if (CurrentPage < Pages)
        {
            <li class="next page-item">
                <a class="page-link" @onclick="() => PageSelected(CurrentPage+1)">
                    @Resources.Resource.Next
                    <em class="fas fa-angle-double-right"></em>
                </a>
            </li>
        }
    </ul>
}

@code {
    private readonly int _maximumPages = 10;
    private readonly int _offsetLeft = 2;

    public int Amount { get { return PersonDataService.PersonCount; } }
    public int Skip { get { return PersonDataService.Skip; } }
    public int Take { get { return PersonDataService.Take; } }
    public int CurrentPage { get { return (Skip / Take) + 1; } }
    public int Pages { get { return (Amount / Take) + ((Amount % Take) > 0 ? 1 : 0); } }
    public int MaximumPageBtns { get { return CurrentPage + _maximumPages; } }
    public int BeginPage
    {
        get
        {
            int page = (CurrentPage - _offsetLeft);

            if (page <= 0)
            {
                return 1;
            }

            return page;
        }
    }
    public bool CanBeShown
    {
        get {
            if (Pages > 1)
                return true;

            return false;
        }
    }
    [Parameter]
    public EventCallbackt OnChange { get; set; }

    private async Task PageSelected(int page)
    {
        if (page == CurrentPage)
        {
            return;
        }

        PersonDataService.Skip = (page - 1) * Take;
        await PersonDataService.LoadPersonList();
        await OnChange.InvokeAsync("page selected");
    }
}